from importlib import reload
import time
import os
import numpy as np
import inspect
import torch
    
#if I do this, I can essentially get a bunch of the exports I need from this!

import astropy.units as u
from astropy.visualization import quantity_support
quantity_support()
u.set_enabled_equivalencies(u.dimensionless_angles())

class Timer(object):
    # with Timer('test'):
    #     print("This is a test.")
    def __init__(self, name=None):
        self.name = name

    def __enter__(self):
        self.tstart = time.time()

    def __exit__(self, type, value, traceback):
        if self.name:
            print('[%s]' % self.name,)
        print('Elapsed: %s' % (time.time() - self.tstart))
        
def timestring():
    return time.strftime("%Y-%m-%d--%H-%M-%S")

def active_sleep(t):
    target_time = time.perf_counter() + t
    while time.perf_counter() < target_time:
        pass

def custom_mkdir(dir_name):
    if not os.path.isdir(dir_name):
        os.mkdir(dir_name)
        
def make_x2ind(xaxis):
    return lambda x: np.argmin((x-xaxis)**2)

def arange_inclusive(start, stop, step=1):
    #check if start and stop and step are integers
    if np.all([isinstance(x, (int, np.integer)) for x in [start, stop, step]]):
        return np.arange(start, stop + 1, step)

    else:
        return np.arange(start, stop + step/2, step)

def print_code(func):
    print(inspect.getsource(func))

def get_size_in_bytes(obj, print_size=True):
    """
    Generated by ChatGPT
    """
    if isinstance(obj, torch.Tensor):
        size_in_bytes = obj.element_size() * obj.nelement()
    elif isinstance(obj, np.ndarray):
        size_in_bytes = obj.nbytes
    else:
        raise TypeError("Object should be a PyTorch Tensor or a numpy array.")

    if print_size:
        print(f"Size of the object: {size_in_bytes:.2e} bytes")

    return size_in_bytes